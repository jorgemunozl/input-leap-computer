#!/bin/bash

# Input Leap Network Manager
# Seamless Ethernet connection management for Input Leap
# Handles network interface detection, configuration, and connectivity

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$HOME/.config/input-leap"
NETWORK_CONFIG="$CONFIG_DIR/network.conf"

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Logging function
log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to detect all network interfaces
detect_interfaces() {
    # Get all network interfaces (exclude loopback) - silently
    local interfaces
    interfaces=$(ip link show 2>/dev/null | grep -E '^[0-9]+:' | grep -v 'lo:' | awk -F': ' '{print $2}' | cut -d'@' -f1)
    
    if [[ -z "$interfaces" ]]; then
        return 1
    fi
    
    echo "$interfaces"
}

# Function to get interface status and IP
get_interface_info() {
    local interface="$1"
    local status ip gateway
    
    # Check if interface is up
    if ip link show "$interface" 2>/dev/null | grep -q "state UP"; then
        status="UP"
    else
        status="DOWN"
    fi
    
    # Get IP address
    ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
    [[ -z "$ip" ]] && ip="No IP"
    
    # Get gateway
    gateway=$(ip route show dev "$interface" 2>/dev/null | grep default | awk '{print $3}' | head -1)
    [[ -z "$gateway" ]] && gateway="No Gateway"
    
    printf "%-15s %-8s %-15s %s\n" "$interface" "$status" "$ip" "$gateway"
}

# Function to show network status
show_network_status() {
    log "Network Interface Status:"
    echo
    printf "%-15s %-8s %-15s %s\n" "INTERFACE" "STATUS" "IP ADDRESS" "GATEWAY"
    printf "%-15s %-8s %-15s %s\n" "---------" "------" "----------" "-------"
    
    # Get interfaces directly
    local interfaces
    if ! interfaces=($(ip link show 2>/dev/null | grep -E '^[0-9]+:' | grep -v 'lo:' | awk -F': ' '{print $2}' | cut -d'@' -f1)); then
        error "Failed to get network interfaces"
        return 1
    fi
    
    if [[ ${#interfaces[@]} -eq 0 ]]; then
        error "No network interfaces found"
        return 1
    fi
    
    for interface in "${interfaces[@]}"; do
        if [[ -n "$interface" ]]; then
            get_interface_info "$interface" || true
        fi
    done
    
    echo
}

# Function to bring up interface
bring_up_interface() {
    local interface="$1"
    
    log "Bringing up interface: $interface"
    
    # Check if interface exists
    if ! ip link show "$interface" &>/dev/null; then
        error "Interface $interface does not exist"
        return 1
    fi
    
    # Bring up interface
    if sudo ip link set "$interface" up; then
        log "Interface $interface brought up successfully"
        
        # Wait a moment for the interface to initialize
        sleep 2
        
        # Try to get IP via DHCP if no IP assigned
        local current_ip
        current_ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
        
        if [[ -z "$current_ip" ]]; then
            log "Requesting IP address via DHCP..."
            if command -v dhcpcd &>/dev/null; then
                sudo dhcpcd "$interface" &
            elif command -v dhclient &>/dev/null; then
                sudo dhclient "$interface" &
            else
                warn "No DHCP client found. You may need to configure IP manually"
            fi
            
            # Wait for DHCP
            sleep 3
        fi
        
        return 0
    else
        error "Failed to bring up interface $interface"
        return 1
    fi
}

# Function to test connectivity to server
test_server_connectivity() {
    local server="$1"
    local port="${2:-24800}"
    
    # Extract IP/hostname from server string
    if [[ "$server" == *":"* ]]; then
        local host="${server%:*}"
        port="${server#*:}"
    else
        local host="$server"
    fi
    
    log "Testing connectivity to $host:$port..."
    
    # Test ping first
    if ping -c 1 -W 3 "$host" &>/dev/null; then
        info "✓ Ping to $host successful"
    else
        warn "✗ Ping to $host failed"
    fi
    
    # Test port connectivity
    if timeout 5 bash -c "</dev/tcp/$host/$port" 2>/dev/null; then
        log "✓ Connection to $host:$port successful"
        return 0
    else
        error "✗ Cannot connect to $host:$port"
        return 1
    fi
}

# Function to auto-configure best interface
auto_configure() {
    log "Auto-configuring network for Input Leap..."
    
    local interfaces
    interfaces=$(detect_interfaces)
    
    # Prioritize ethernet interfaces
    local eth_interfaces
    eth_interfaces=$(echo "$interfaces" | grep -E '^(eth|en)' || true)
    
    if [[ -n "$eth_interfaces" ]]; then
        log "Found Ethernet interfaces: $eth_interfaces"
        
        # Try each ethernet interface
        while IFS= read -r interface; do
            log "Configuring interface: $interface"
            
            # Bring up interface if down
            if ! ip link show "$interface" | grep -q "state UP"; then
                bring_up_interface "$interface"
            fi
            
            # Check if it has IP
            local ip
            ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
            
            if [[ -n "$ip" ]]; then
                log "✓ Interface $interface is ready with IP: $ip"
                
                # Save as preferred interface
                echo "PREFERRED_INTERFACE=$interface" > "$NETWORK_CONFIG"
                echo "INTERFACE_IP=$ip" >> "$NETWORK_CONFIG"
                
                return 0
            else
                warn "Interface $interface has no IP address"
            fi
        done <<< "$eth_interfaces"
    fi
    
    # Try wireless interfaces if no ethernet worked
    local wifi_interfaces
    wifi_interfaces=$(echo "$interfaces" | grep -E '^(wl|wlan)' || true)
    
    if [[ -n "$wifi_interfaces" ]]; then
        warn "Falling back to WiFi interfaces"
        
        while IFS= read -r interface; do
            local ip
            ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
            
            if [[ -n "$ip" ]]; then
                log "✓ Using WiFi interface $interface with IP: $ip"
                
                # Save as preferred interface
                echo "PREFERRED_INTERFACE=$interface" > "$NETWORK_CONFIG"
                echo "INTERFACE_IP=$ip" >> "$NETWORK_CONFIG"
                
                return 0
            fi
        done <<< "$wifi_interfaces"
    fi
    
    error "No suitable network interface found with IP address"
    return 1
}

# Function to force interface configuration
force_configure_interface() {
    local interface="$1"
    
    log "Force configuring interface: $interface"
    
    # Bring down interface first
    sudo ip link set "$interface" down 2>/dev/null || true
    sleep 1
    
    # Bring up interface
    if bring_up_interface "$interface"; then
        # Force DHCP renewal
        log "Forcing DHCP renewal..."
        
        if command -v dhcpcd &>/dev/null; then
            sudo pkill dhcpcd || true
            sleep 1
            sudo dhcpcd "$interface"
        elif command -v dhclient &>/dev/null; then
            sudo pkill dhclient || true
            sleep 1
            sudo dhclient "$interface"
        fi
        
        # Wait for IP assignment
        local attempts=0
        while [[ $attempts -lt 10 ]]; do
            local ip
            ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
            
            if [[ -n "$ip" ]]; then
                log "✓ Interface $interface configured with IP: $ip"
                
                # Save configuration
                echo "PREFERRED_INTERFACE=$interface" > "$NETWORK_CONFIG"
                echo "INTERFACE_IP=$ip" >> "$NETWORK_CONFIG"
                
                return 0
            fi
            
            sleep 2
            ((attempts++))
        done
        
        error "Failed to get IP address for $interface after 20 seconds"
        return 1
    else
        error "Failed to bring up interface $interface"
        return 1
    fi
}

# Function to check Input Leap server configuration
check_server_config() {
    local server_config="$CONFIG_DIR/server.conf"
    
    if [[ -f "$server_config" ]]; then
        local server
        server=$(cat "$server_config")
        
        if [[ -n "$server" ]]; then
            log "Testing connectivity to configured server: $server"
            test_server_connectivity "$server"
            return $?
        fi
    fi
    
    warn "No Input Leap server configured. Run 'leap config' to set up server."
    return 1
}

# Function to show help
show_help() {
    echo ""
    echo -e "${BLUE}🌐 Input Leap Network Manager${NC}"
    echo "═══════════════════════════════════════"
    echo ""
    echo -e "${GREEN}Basic Commands:${NC}"
    echo -e "  ${CYAN}leap network status${NC}              Show all network interfaces"
    echo -e "  ${CYAN}leap network auto${NC}                Auto-configure best interface"
    echo -e "  ${CYAN}leap network test HOST${NC}           Test connectivity to server"
    echo -e "  ${CYAN}leap network check${NC}               Check Input Leap server"
    echo ""
    echo -e "${GREEN}Advanced Commands:${NC}"
    echo -e "  ${CYAN}leap network up <interface>${NC}      Bring up specific interface"
    echo -e "  ${CYAN}leap network force <interface>${NC}   Force configure interface"
    echo -e "  ${CYAN}leap network reset${NC}               Reset network configuration"
    echo ""
    echo -e "${GREEN}Examples:${NC}"
    echo -e "  ${YELLOW}leap network status${NC}             # Show all interface status"
    echo -e "  ${YELLOW}leap network auto${NC}               # Auto-configure best interface"
    echo -e "  ${YELLOW}leap network test 192.168.1.100${NC} # Test server connectivity"
    echo -e "  ${YELLOW}leap network up eth0${NC}            # Bring up eth0 interface"
    echo ""
    echo -e "${GREEN}Troubleshooting:${NC}"
    echo -e "  ${BLUE}No Ethernet?${NC} Run ${CYAN}leap network auto${NC} to configure"
    echo -e "  ${BLUE}Can't connect?${NC} Run ${CYAN}leap network test SERVER${NC} first"
    echo -e "  ${BLUE}Multiple interfaces?${NC} Use ${CYAN}leap network status${NC} to see all"
    echo ""
}

# Main function
main() {
    case "${1:-}" in
        "status")
            show_network_status
            ;;
        "auto")
            auto_configure
            ;;
        "up")
            if [[ -z "${2:-}" ]]; then
                error "Interface name required. Usage: $0 up <interface>"
                exit 1
            fi
            bring_up_interface "$2"
            ;;
        "force")
            if [[ -z "${2:-}" ]]; then
                error "Interface name required. Usage: $0 force <interface>"
                exit 1
            fi
            force_configure_interface "$2"
            ;;
        "test")
            if [[ -z "${2:-}" ]]; then
                error "Server required. Usage: $0 test <server:port>"
                exit 1
            fi
            test_server_connectivity "$2"
            ;;
        "check")
            check_server_config
            ;;
        "reset")
            log "Resetting network configuration..."
            rm -f "$NETWORK_CONFIG"
            log "Network configuration reset. Run 'auto' to reconfigure."
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
