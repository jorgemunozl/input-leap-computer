#!/bin/bash

# Input Leap Network Manager
# Seamless Ethernet connection management for Input Leap
# Handles network interface detection, configuration, and connectivity

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$HOME/.config/input-leap"
NETWORK_CONFIG="$CONFIG_DIR/network.conf"

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Logging function
log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to detect all network interfaces
detect_interfaces() {
    # Get all network interfaces (exclude loopback) - silently
    local interfaces
    interfaces=$(ip link show 2>/dev/null | grep -E '^[0-9]+:' | grep -v 'lo:' | awk -F': ' '{print $2}' | cut -d'@' -f1)
    
    if [[ -z "$interfaces" ]]; then
        return 1
    fi
    
    echo "$interfaces"
}

# Function to get interface status and IP
get_interface_info() {
    local interface="$1"
    local status ip gateway
    
    # Check if interface is up
    if ip link show "$interface" 2>/dev/null | grep -q "state UP"; then
        status="UP"
    else
        status="DOWN"
    fi
    
    # Get IP address
    ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
    [[ -z "$ip" ]] && ip="No IP"
    
    # Get gateway
    gateway=$(ip route show dev "$interface" 2>/dev/null | grep default | awk '{print $3}' | head -1)
    [[ -z "$gateway" ]] && gateway="No Gateway"
    
    printf "%-15s %-8s %-15s %s\n" "$interface" "$status" "$ip" "$gateway"
}

# Function to show network status
show_network_status() {
    log "Network Interface Status:"
    echo
    printf "%-15s %-8s %-15s %s\n" "INTERFACE" "STATUS" "IP ADDRESS" "GATEWAY"
    printf "%-15s %-8s %-15s %s\n" "---------" "------" "----------" "-------"
    
    # Get interfaces directly
    local interfaces
    if ! interfaces=($(ip link show 2>/dev/null | grep -E '^[0-9]+:' | grep -v 'lo:' | awk -F': ' '{print $2}' | cut -d'@' -f1)); then
        error "Failed to get network interfaces"
        return 1
    fi
    
    if [[ ${#interfaces[@]} -eq 0 ]]; then
        error "No network interfaces found"
        return 1
    fi
    
    for interface in "${interfaces[@]}"; do
        if [[ -n "$interface" ]]; then
            get_interface_info "$interface" || true
        fi
    done
    
    echo
}

# Function to bring up interface
bring_up_interface() {
    local interface="$1"
    
    log "Bringing up interface: $interface"
    
    # Check if interface exists
    if ! ip link show "$interface" &>/dev/null; then
        error "Interface $interface does not exist"
        return 1
    fi
    
    # Bring up interface
    if sudo ip link set "$interface" up; then
        log "Interface $interface brought up successfully"
        
        # Wait a moment for the interface to initialize
        sleep 2
        
        # Try to get IP via DHCP if no IP assigned
        local current_ip
        current_ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
        
        if [[ -z "$current_ip" ]]; then
            log "Requesting IP address via DHCP..."
            if command -v dhcpcd &>/dev/null; then
                sudo dhcpcd "$interface" &
            elif command -v dhclient &>/dev/null; then
                sudo dhclient "$interface" &
            else
                warn "No DHCP client found. You may need to configure IP manually"
            fi
            
            # Wait for DHCP
            sleep 3
        fi
        
        return 0
    else
        error "Failed to bring up interface $interface"
        return 1
    fi
}

# Function to test connectivity to server
test_server_connectivity() {
    local server="$1"
    local port="${2:-24800}"
    
    # Extract IP/hostname from server string
    if [[ "$server" == *":"* ]]; then
        local host="${server%:*}"
        port="${server#*:}"
    else
        local host="$server"
    fi
    
    log "Testing connectivity to $host:$port..."
    
    # Test ping first
    if ping -c 1 -W 3 "$host" &>/dev/null; then
        info "✓ Ping to $host successful"
    else
        warn "✗ Ping to $host failed"
    fi
    
    # Test port connectivity
    if timeout 5 bash -c "</dev/tcp/$host/$port" 2>/dev/null; then
        log "✓ Connection to $host:$port successful"
        return 0
    else
        error "✗ Cannot connect to $host:$port"
        return 1
    fi
}

# Function to configure static IP for Ethernet interface
configure_static_ip() {
    local interface="$1"
    local static_ip="${2:-169.254.135.230}"
    local netmask="${3:-16}"
    
    log "Configuring static IP for $interface..."
    info "Setting IP: $static_ip/$netmask"
    
    # Backup current configuration
    local backup_file="$CONFIG_DIR/network-backup-$(date +%Y%m%d-%H%M%S).conf"
    {
        echo "# Network backup for $interface at $(date)"
        echo "# Current configuration before Input Leap static IP setup"
        echo "INTERFACE=$interface"
        ip addr show "$interface" 2>/dev/null || true
        ip route show dev "$interface" 2>/dev/null || true
    } > "$backup_file"
    
    log "Current configuration backed up to: $backup_file"
    
    # Remove existing IP addresses (but keep interface up)
    local existing_ips
    existing_ips=$(ip addr show "$interface" 2>/dev/null | grep 'inet ' | awk '{print $2}' || true)
    
    if [[ -n "$existing_ips" ]]; then
        info "Removing existing IP addresses from $interface..."
        while IFS= read -r ip; do
            if [[ -n "$ip" ]]; then
                log "Removing IP: $ip"
                sudo ip addr del "$ip" dev "$interface" 2>/dev/null || true
            fi
        done <<< "$existing_ips"
        # Wait a moment for the removal to take effect
        sleep 1
    fi
    
    # Bring interface up
    if ! sudo ip link set "$interface" up; then
        error "Failed to bring up interface $interface"
        return 1
    fi
    
    # Add static IP
    if sudo ip addr add "$static_ip/$netmask" dev "$interface"; then
        log "✓ Successfully configured static IP: $static_ip/$netmask on $interface"
        
        # Save configuration for persistence
        {
            echo "# Input Leap static IP configuration"
            echo "# Generated on $(date)"
            echo "INTERFACE=$interface"
            echo "STATIC_IP=$static_ip"
            echo "NETMASK=$netmask"
            echo "CONFIGURED_DATE=$(date)"
        } > "$NETWORK_CONFIG"
        
        return 0
    else
        error "Failed to add static IP to $interface"
        return 1
    fi
}

# Function to detect and configure best Ethernet interface with static IP
auto_configure_ethernet_static() {
    log "Auto-configuring Ethernet with static IP for Input Leap..."
    
    local interfaces
    if ! interfaces=$(detect_interfaces); then
        error "No network interfaces found!"
        echo -e "${YELLOW}💡 This usually means:${NC}"
        echo -e "   ${CYAN}• Network hardware is not detected${NC}"
        echo -e "   ${CYAN}• You're running in a virtual machine without network${NC}"
        echo -e "   ${CYAN}• Network drivers are missing${NC}"
        echo ""
        echo -e "${YELLOW}🔧 Try:${NC}"
        echo -e "   ${CYAN}ip link show${NC}    - See all interfaces"
        echo -e "   ${CYAN}lspci | grep -i network${NC}    - Check network hardware"
        return 1
    fi
    
    # Find Ethernet interfaces
    local eth_interfaces
    eth_interfaces=$(echo "$interfaces" | grep -E '^(eth|en)' || true)
    
    if [[ -z "$eth_interfaces" ]]; then
        warn "No Ethernet interfaces found!"
        echo -e "${YELLOW}Available interfaces:${NC}"
        echo "$interfaces"
        echo ""
        echo -e "${YELLOW}💡 You can manually configure any interface:${NC}"
        echo -e "   ${CYAN}leap network static <interface> <ip>${NC}"
        return 1
    fi
    
    log "Found Ethernet interfaces: $eth_interfaces"
    
    # Try to configure the first available Ethernet interface
    local target_interface
    target_interface=$(echo "$eth_interfaces" | head -1)
    
    if [[ -n "$target_interface" ]]; then
        log "Configuring primary Ethernet interface: $target_interface"
        
        # Use link-local IP range for reliable peer-to-peer connection
        local static_ip="169.254.135.230"
        
        if configure_static_ip "$target_interface" "$static_ip" "16"; then
            log "✓ Successfully configured static IP on $target_interface"
            
            # Test the interface
            sleep 2
            if ip addr show "$target_interface" | grep -q "$static_ip"; then
                log "✓ Static IP configuration verified"
                
                # Show the configuration
                echo ""
                info "📡 Ethernet interface configured:"
                printf "   Interface: ${CYAN}%s${NC}\n" "$target_interface"
                printf "   Static IP: ${GREEN}%s/16${NC}\n" "$static_ip"
                printf "   Network:   ${BLUE}169.254.0.0/16${NC} (Link-Local)\n"
                echo ""
                echo -e "${YELLOW}💡 Configure your server to use IP in range: 169.254.x.x${NC}"
                echo -e "${YELLOW}   Suggested server IP: 169.254.135.231${NC}"
                
                return 0
            else
                error "Static IP configuration failed verification"
                return 1
            fi
        else
            error "Failed to configure static IP on $target_interface"
            return 1
        fi
    else
        error "No suitable Ethernet interface found"
        return 1
    fi
}

# Function to configure specific static IP address on best Ethernet interface
configure_static_ip_address() {
    local target_ip="$1"
    log "Configuring Ethernet with specific static IP: $target_ip..."
    
    local interfaces
    if ! interfaces=$(detect_interfaces); then
        error "No network interfaces found!"
        return 1
    fi
    
    # Find Ethernet interfaces
    local eth_interfaces
    eth_interfaces=$(echo "$interfaces" | grep -E '^(eth|en)' || true)
    
    if [[ -z "$eth_interfaces" ]]; then
        warn "No Ethernet interfaces found!"
        echo -e "${YELLOW}Available interfaces:${NC}"
        echo "$interfaces"
        return 1
    fi
    
    log "Found Ethernet interfaces: $eth_interfaces"
    
    # Try to configure the first available Ethernet interface
    local target_interface
    target_interface=$(echo "$eth_interfaces" | head -1)
    
    if [[ -n "$target_interface" ]]; then
        log "Configuring primary Ethernet interface: $target_interface"
        
        # Check if interface already has a different IP in the same range
        local existing_ip
        existing_ip=$(ip addr show "$target_interface" 2>/dev/null | grep 'inet 169\.254\.' | awk '{print $2}' | cut -d'/' -f1 || true)
        
        if [[ -n "$existing_ip" && "$existing_ip" != "$target_ip" ]]; then
            log "Found existing IP $existing_ip, replacing with $target_ip..."
            # Remove the specific existing IP
            sudo ip addr del "$existing_ip/16" dev "$target_interface" 2>/dev/null || true
            sleep 1
        fi
        
        if configure_static_ip "$target_interface" "$target_ip" "16"; then
            log "✓ Successfully configured static IP on $target_interface"
            
            # Test the interface with retries
            local retry_count=0
            local max_retries=5
            while [[ $retry_count -lt $max_retries ]]; do
                sleep 1
                if ip addr show "$target_interface" | grep -q "$target_ip"; then
                    break
                fi
                ((retry_count++))
                log "Waiting for IP configuration to take effect... ($retry_count/$max_retries)"
            done
            
            if ip addr show "$target_interface" | grep -q "$target_ip"; then
                log "✓ Static IP configuration verified"
                
                # Show the configuration
                echo ""
                info "📡 Ethernet interface configured:"
                printf "   Interface: ${CYAN}%s${NC}\n" "$target_interface"
                printf "   Static IP: ${GREEN}%s/16${NC}\n" "$target_ip"
                printf "   Network:   ${BLUE}169.254.0.0/16${NC} (Link-Local)\n"
                echo ""
                
                # Provide server configuration tips based on the IP chosen
                case "$target_ip" in
                    "169.254.135.230")
                        echo -e "${YELLOW}💡 Server configuration for primary client:${NC}"
                        echo -e "${YELLOW}   Configure server with client IP: 169.254.135.230${NC}"
                        echo -e "${YELLOW}   Suggested server IP: 169.254.135.231${NC}"
                        ;;
                    "169.254.135.231")
                        echo -e "${YELLOW}💡 Server configuration for secondary client:${NC}"
                        echo -e "${YELLOW}   Configure server with client IP: 169.254.135.231${NC}"
                        echo -e "${YELLOW}   Your server should already be on: 169.254.135.230 or other IP${NC}"
                        ;;
                    *)
                        echo -e "${YELLOW}💡 Configure your server to use IP in range: 169.254.x.x${NC}"
                        ;;
                esac
                
                return 0
            else
                error "Static IP configuration failed verification after retries"
                log "Current interface status:"
                ip addr show "$target_interface" || true
                return 1
            fi
        else
            error "Failed to configure static IP on $target_interface"
            return 1
        fi
    else
        error "No suitable Ethernet interface found"
        return 1
    fi
}

# Function to manually configure static IP
manual_static_ip() {
    local interface="$1"
    local ip="$2"
    local netmask="${3:-24}"
    
    if [[ -z "$interface" ]] || [[ -z "$ip" ]]; then
        error "Usage: manual_static_ip <interface> <ip> [netmask]"
        echo -e "${YELLOW}Example: manual_static_ip enxc8a362e2c6d4 169.254.135.230 16${NC}"
        return 1
    fi
    
    # Validate interface exists
    if ! ip link show "$interface" &>/dev/null; then
        error "Interface $interface not found!"
        echo -e "${YELLOW}Available interfaces:${NC}"
        ip link show | grep -E '^[0-9]+:' | grep -v 'lo:' | awk -F': ' '{print "   " $2}' | cut -d'@' -f1
        return 1
    fi
    
    # Validate IP format
    if ! [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        error "Invalid IP address format: $ip"
        return 1
    fi
    
    log "Manually configuring static IP..."
    configure_static_ip "$interface" "$ip" "$netmask"
}

# Function to auto-configure best interface
auto_configure() {
    log "Auto-configuring network for Input Leap..."
    
    local interfaces
    if ! interfaces=$(detect_interfaces); then
        error "No network interfaces found!"
        echo -e "${YELLOW}💡 This usually means:${NC}"
        echo -e "   ${CYAN}• Network hardware is not detected${NC}"
        echo -e "   ${CYAN}• You're running in a virtual machine without network${NC}"
        echo -e "   ${CYAN}• Network drivers are missing${NC}"
        echo ""
        echo -e "${YELLOW}🔧 Try:${NC}"
        echo -e "   ${CYAN}ip link show${NC}    - See all interfaces"
        echo -e "   ${CYAN}lspci | grep -i network${NC}    - Check network hardware"
        return 1
    fi
    
    # Prioritize ethernet interfaces
    local eth_interfaces
    eth_interfaces=$(echo "$interfaces" | grep -E '^(eth|en)' || true)
    
    if [[ -n "$eth_interfaces" ]]; then
        log "Found Ethernet interfaces: $eth_interfaces"
        
        # Try each ethernet interface
        while IFS= read -r interface; do
            log "Configuring interface: $interface"
            
            # Bring up interface if down
            if ! ip link show "$interface" | grep -q "state UP"; then
                bring_up_interface "$interface"
            fi
            
            # Check if it has IP
            local ip
            ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
            
            if [[ -n "$ip" ]]; then
                log "✓ Interface $interface is ready with IP: $ip"
                
                # Save as preferred interface
                echo "PREFERRED_INTERFACE=$interface" > "$NETWORK_CONFIG"
                echo "INTERFACE_IP=$ip" >> "$NETWORK_CONFIG"
                
                return 0
            else
                warn "Interface $interface has no IP address"
            fi
        done <<< "$eth_interfaces"
    fi
    
    # Try wireless interfaces if no ethernet worked
    local wifi_interfaces
    wifi_interfaces=$(echo "$interfaces" | grep -E '^(wl|wlan)' || true)
    
    if [[ -n "$wifi_interfaces" ]]; then
        warn "Falling back to WiFi interfaces"
        
        while IFS= read -r interface; do
            local ip
            ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
            
            if [[ -n "$ip" ]]; then
                log "✓ Using WiFi interface $interface with IP: $ip"
                
                # Save as preferred interface
                echo "PREFERRED_INTERFACE=$interface" > "$NETWORK_CONFIG"
                echo "INTERFACE_IP=$ip" >> "$NETWORK_CONFIG"
                
                return 0
            fi
        done <<< "$wifi_interfaces"
    fi
    
    error "No suitable network interface found with IP address"
    return 1
}

# Function to force interface configuration
force_configure_interface() {
    local interface="$1"
    
    log "Force configuring interface: $interface"
    
    # Bring down interface first
    sudo ip link set "$interface" down 2>/dev/null || true
    sleep 1
    
    # Bring up interface
    if bring_up_interface "$interface"; then
        # Force DHCP renewal
        log "Forcing DHCP renewal..."
        
        if command -v dhcpcd &>/dev/null; then
            sudo pkill dhcpcd || true
            sleep 1
            sudo dhcpcd "$interface"
        elif command -v dhclient &>/dev/null; then
            sudo pkill dhclient || true
            sleep 1
            sudo dhclient "$interface"
        fi
        
        # Wait for IP assignment
        local attempts=0
        while [[ $attempts -lt 10 ]]; do
            local ip
            ip=$(ip addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
            
            if [[ -n "$ip" ]]; then
                log "✓ Interface $interface configured with IP: $ip"
                
                # Save configuration
                echo "PREFERRED_INTERFACE=$interface" > "$NETWORK_CONFIG"
                echo "INTERFACE_IP=$ip" >> "$NETWORK_CONFIG"
                
                return 0
            fi
            
            sleep 2
            ((attempts++))
        done
        
        error "Failed to get IP address for $interface after 20 seconds"
        return 1
    else
        error "Failed to bring up interface $interface"
        return 1
    fi
}

# Function to check Input Leap server configuration
check_server_config() {
    local server_config="$CONFIG_DIR/server.conf"
    
    if [[ -f "$server_config" ]]; then
        local server
        server=$(cat "$server_config")
        
        if [[ -n "$server" ]]; then
            log "Testing connectivity to configured server: $server"
            test_server_connectivity "$server"
            return $?
        fi
    fi
    
    warn "No Input Leap server configured. Run 'leap config' to set up server."
    return 1
}

# Function to show help
show_help() {
    echo ""
    echo -e "${BLUE}🌐 Input Leap Network Manager${NC}"
    echo "═══════════════════════════════════════"
    echo ""
    echo -e "${GREEN}Basic Commands:${NC}"
    echo -e "  ${CYAN}leap network status${NC}              Show all network interfaces"
    echo -e "  ${CYAN}leap network auto${NC}                Auto-configure with DHCP"
    echo -e "  ${CYAN}leap network static${NC}              Auto-configure with static IP"
    echo -e "  ${CYAN}leap network test HOST${NC}           Test connectivity to server"
    echo -e "  ${CYAN}leap network check${NC}               Check Input Leap server"
    echo ""
    echo -e "${GREEN}Static IP Commands:${NC}"
    echo -e "  ${CYAN}leap network static${NC}                      Auto-configure Ethernet with 169.254.135.230"
    echo -e "  ${CYAN}leap network static <interface> <ip>${NC}     Set custom static IP"
    echo -e "  ${CYAN}leap network static <interface> <ip> <mask>${NC} Set with custom netmask"
    echo ""
    echo -e "${GREEN}Advanced Commands:${NC}"
    echo -e "  ${CYAN}leap network up <interface>${NC}      Bring up specific interface"
    echo -e "  ${CYAN}leap network force <interface>${NC}   Force configure interface"
    echo -e "  ${CYAN}leap network reset${NC}               Reset network configuration"
    echo ""
    echo -e "${GREEN}Examples:${NC}"
    echo -e "  ${YELLOW}leap network status${NC}                     # Show all interface status"
    echo -e "  ${YELLOW}leap network static${NC}                     # Auto-configure Ethernet with static IP"
    echo -e "  ${YELLOW}leap network static enxc8a362 169.254.135.230${NC} # Custom interface & IP"
    echo -e "  ${YELLOW}leap network test 169.254.135.231${NC}       # Test static IP server"
    echo -e "  ${YELLOW}leap network auto${NC}                       # DHCP auto-configuration"
    echo ""
    echo -e "${GREEN}💡 Recommended for Input Leap:${NC}"
    echo -e "  ${BLUE}Use static IP for reliable connections!${NC}"
    echo -e "  ${CYAN}leap network static${NC}  # Sets up 169.254.135.230/16"
    echo -e "  ${YELLOW}Then configure your server to: 169.254.135.231${NC}"
    echo ""
    echo -e "${GREEN}Troubleshooting:${NC}"
    echo -e "  ${BLUE}No Ethernet?${NC} Run ${CYAN}leap network static${NC} to configure"
    echo -e "  ${BLUE}Can't connect?${NC} Run ${CYAN}leap network test SERVER${NC} first"
    echo -e "  ${BLUE}Multiple interfaces?${NC} Use ${CYAN}leap network status${NC} to see all"
    echo ""
}

# Main function
main() {
    case "${1:-}" in
        "status")
            show_network_status
            ;;
        "auto")
            auto_configure
            ;;
        "auto_ethernet_static")
            # Alias for setup script use
            auto_configure_ethernet_static
            ;;
        "static_ip")
            # Configure static IP with specified address
            if [[ -z "${2:-}" ]]; then
                error "IP address required. Usage: $0 static_ip <ip_address>"
                exit 1
            fi
            configure_static_ip_address "$2"
            ;;
        "static")
            # Handle different static IP scenarios
            if [[ -z "${2:-}" ]]; then
                # No arguments = auto-configure with static IP
                auto_configure_ethernet_static
            elif [[ -z "${3:-}" ]]; then
                error "IP address required. Usage: $0 static <interface> <ip> [netmask]"
                echo -e "${YELLOW}Example: $0 static enxc8a362e2c6d4 169.254.135.230${NC}"
                exit 1
            else
                # Manual static IP configuration
                manual_static_ip "$2" "$3" "${4:-16}"
            fi
            ;;
        "up")
            if [[ -z "${2:-}" ]]; then
                error "Interface name required. Usage: $0 up <interface>"
                exit 1
            fi
            bring_up_interface "$2"
            ;;
        "force")
            if [[ -z "${2:-}" ]]; then
                error "Interface name required. Usage: $0 force <interface>"
                exit 1
            fi
            force_configure_interface "$2"
            ;;
        "test")
            if [[ -z "${2:-}" ]]; then
                error "Server required. Usage: $0 test <server:port>"
                exit 1
            fi
            test_server_connectivity "$2"
            ;;
        "check")
            check_server_config
            ;;
        "debug")
            # Debug network status
            echo -e "${CYAN}=== Network Debug Information ===${NC}"
            echo ""
            echo -e "${YELLOW}Current IP addresses:${NC}"
            ip addr show | grep -E "^[0-9]+:|inet " || true
            echo ""
            echo -e "${YELLOW}Network configuration file:${NC}"
            if [[ -f "$NETWORK_CONFIG" ]]; then
                cat "$NETWORK_CONFIG"
            else
                echo "No network configuration file found"
            fi
            echo ""
            ;;
        "reset")
            log "Resetting network configuration..."
            rm -f "$NETWORK_CONFIG"
            log "Network configuration reset. Run 'auto' or 'static' to reconfigure."
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
