#!/bin/bash

# Input Leap Manager - Smart connection management
# Usage: input-leap-manager [start|stop|restart|status|config|test|logs]

set -euo pipefail

# Configuration
readonly CONFIG_FILE="$HOME/.config/input-leap/server.conf"
readonly LOG_FILE="$HOME/.cache/input-leap/client.log"
readonly PID_FILE="$HOME/.cache/input-leap/client.pid"
readonly LOCK_FILE="$HOME/.cache/input-leap/client.lock"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Ensure directories exist
mkdir -p "$(dirname "$CONFIG_FILE")" "$(dirname "$LOG_FILE")" "$(dirname "$PID_FILE")"

# Detect desktop environment
detect_desktop() {
    # Safely handle potentially unset environment variables
    local xdg_desktop="${XDG_CURRENT_DESKTOP:-}"
    local desktop_session="${DESKTOP_SESSION:-}"
    local session_type="${XDG_SESSION_TYPE:-}"
    
    # Check for GNOME components first (may be available even with different WM)
    if [[ "$xdg_desktop" == *"GNOME"* ]] || [[ "$desktop_session" == *"gnome"* ]] || command -v gsettings &> /dev/null; then
        echo "GNOME"
    elif [[ "$xdg_desktop" == *"KDE"* ]]; then
        echo "KDE"
    elif [[ "$session_type" == "wayland" ]]; then
        echo "WAYLAND"
    else
        echo "X11"
    fi
}

# Logging functions
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
    log "INFO: $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
    log "WARN: $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log "ERROR: $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    log "SUCCESS: $1"
}

# Check if client is running
is_running() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            rm -f "$PID_FILE"
        fi
    fi
    return 1
}

# Load configuration
load_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        return 1
    fi
    
    source "$CONFIG_FILE"
    
    # Validate required variables
    if [[ -z "${SERVER_HOST:-}" ]]; then
        return 1
    fi
    
    # Set defaults
    SERVER_PORT="${SERVER_PORT:-24800}"
    CLIENT_NAME="${CLIENT_NAME:-$(hostname)}"
    
    return 0
}

# Interactive configuration
configure() {
    log_info "Configuring Input Leap server connection..."
    
    # Get server details
    echo -n "Enter server IP/hostname: "
    read -r server_input
    
    # Validate input
    if [[ -z "$server_input" ]]; then
        log_error "Server IP/hostname cannot be empty"
        return 1
    fi
    
    # Parse server input (handle IP:port or just IP)
    if [[ "$server_input" == *":"* ]]; then
        SERVER_HOST="${server_input%:*}"
        SERVER_PORT="${server_input#*:}"
    else
        SERVER_HOST="$server_input"
        SERVER_PORT="24800"
    fi
    
    # Validate port number
    if ! [[ "$SERVER_PORT" =~ ^[0-9]+$ ]] || [ "$SERVER_PORT" -lt 1 ] || [ "$SERVER_PORT" -gt 65535 ]; then
        log_error "Invalid port number: $SERVER_PORT"
        return 1
    fi
    
    # Get client name (default to hostname)
    echo -n "Enter client name [$(hostname)]: "
    read -r client_input
    CLIENT_NAME="${client_input:-$(hostname)}"
    
    # Save configuration
    cat > "$CONFIG_FILE" << EOF
# Input Leap Server Configuration
SERVER_HOST="$SERVER_HOST"
SERVER_PORT="$SERVER_PORT"
CLIENT_NAME="$CLIENT_NAME"

# Generated on $(date)
EOF
    
    log_success "Configuration saved to $CONFIG_FILE"
    
    # Test connection
    if test_connection; then
        log_success "Connection test passed!"
        return 0
    else
        log_warn "Connection test failed. Please check your settings."
        return 1
    fi
}

# Test server connection
test_connection() {
    if ! load_config; then
        log_error "No configuration found. Run 'config' first."
        return 1
    fi
    
    log_info "Testing connection to $SERVER_HOST:$SERVER_PORT..."
    
    # First test basic network connectivity
    if ! ping -c 1 -W 2 "$SERVER_HOST" &>/dev/null; then
        log_warn "Host $SERVER_HOST is not reachable via ping (but Input Leap might still work)"
    fi
    
    # Test Input Leap port specifically
    if timeout 5 bash -c "</dev/tcp/$SERVER_HOST/$SERVER_PORT" 2>/dev/null; then
        log_success "Server is reachable at $SERVER_HOST:$SERVER_PORT"
        return 0
    else
        log_error "Cannot reach server at $SERVER_HOST:$SERVER_PORT"
        log_info "Please check: 1) Server is running 2) Port $SERVER_PORT is open 3) Network connectivity"
        return 1
    fi
}

# Start Input Leap client
start_client() {
    # Check if already running
    if is_running; then
        log_warn "Input Leap client is already running (PID: $(cat "$PID_FILE"))"
        return 0
    fi
    
    # Load configuration
    if ! load_config; then
        log_error "No configuration found. Run 'config' first."
        return 1
    fi
    
    # Check network interfaces first
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    local network_manager="$script_dir/network-manager"
    
    if [[ -x "$network_manager" ]]; then
        log_info "Checking network interfaces..."
        if ! "$network_manager" auto > /dev/null 2>&1; then
            log_warn "Network auto-configuration failed. Trying manual network check..."
            
            # Show network status for user awareness
            log_info "Current network status:"
            "$network_manager" status
            
            # Ask user if they want to continue
            echo -n "Network issues detected. Continue anyway? [y/N]: "
            read -r continue_choice
            if [[ ! "$continue_choice" =~ ^[Yy] ]]; then
                log_error "Connection cancelled. Fix network issues first."
                log_info "Try: leap network auto   # Auto-configure network"
                log_info "Or:  leap network status # Check network status"
                return 1
            fi
        else
            log_success "Network interface configured successfully"
        fi
    fi
    
    # Test connection first
    if ! test_connection; then
        log_error "Cannot connect to server. Check configuration and network."
        log_info "Try: leap network test $SERVER_HOST:$SERVER_PORT"
        return 1
    fi
    
    # Use lock file to prevent multiple instances
    if ! (set -C; echo $$ > "$LOCK_FILE") 2>/dev/null; then
        log_warn "Another instance is starting. Please wait..."
        return 1
    fi
    
    trap 'rm -f "$LOCK_FILE"' EXIT
    
    local desktop_env=$(detect_desktop)
    log_info "Starting Input Leap client..."
    log_info "Connecting to $SERVER_HOST:$SERVER_PORT as $CLIENT_NAME"
    log_info "Desktop environment: $desktop_env"
    
    # Enhanced GNOME/desktop environment handling
    if [[ "$desktop_env" == "GNOME" ]]; then
        log_info "Applying comprehensive GNOME optimizations..."
        
        # Set GNOME-specific environment variables
        export GDK_BACKEND=x11
        export GNOME_DESKTOP_SESSION_ID=this-is-deprecated
        export XDG_CURRENT_DESKTOP=GNOME
        export DESKTOP_SESSION=gnome
        
        # Set display if not already set
        if [[ -z "${DISPLAY:-}" ]]; then
            export DISPLAY=:0
        fi
        
        # Set XDG runtime directory if needed
        if [[ -z "${XDG_RUNTIME_DIR:-}" ]]; then
            export XDG_RUNTIME_DIR="/run/user/$(id -u)"
        fi
        
        # Ensure GNOME accessibility bus is available
        if [[ -z "${AT_SPI_BUS_ADDRESS:-}" ]] && command -v gsettings &>/dev/null; then
            # Start accessibility bus if not running
            if ! pgrep -x at-spi-bus-launcher >/dev/null; then
                /usr/lib/at-spi2-core/at-spi-bus-launcher --launch-immediately &
                sleep 1
            fi
        fi
        
        # Notify GNOME about connection attempt
        if command -v notify-send &>/dev/null; then
            notify-send -i network-wireless -u low "Input Leap" "Connecting to $SERVER_HOST..." &
        fi
        
        log_success "GNOME environment optimized for Input Leap"
    fi
    
    # Start client in background
    nohup input-leap-client \
        --name "$CLIENT_NAME" \
        "$SERVER_HOST:$SERVER_PORT" \
        >> "$LOG_FILE" 2>&1 &
    
    local pid=$!
    echo "$pid" > "$PID_FILE"
    
    # Wait a moment and check if it started successfully
    sleep 2
    if ps -p "$pid" > /dev/null 2>&1; then
        log_success "Input Leap client started (PID: $pid)"
        
        # Enhanced GNOME desktop notification
        if command -v notify-send &> /dev/null; then
            if [[ "$desktop_env" == "GNOME" ]]; then
                # Use GNOME notification helper if available
                if [[ -f "$HOME/.config/input-leap/notify-input-leap.sh" ]]; then
                    "$HOME/.config/input-leap/notify-input-leap.sh" "connected" "$SERVER_HOST" &
                else
                    notify-send -i network-wireless -u normal "Input Leap" "âœ… Connected to $SERVER_HOST" -t 5000 2>/dev/null || true
                fi
            else
                notify-send "Input Leap" "Connected to $SERVER_HOST" -t 3000 2>/dev/null || true
            fi
        fi
        
        rm -f "$LOCK_FILE"
        return 0
    else
        log_error "Failed to start Input Leap client"
        rm -f "$PID_FILE" "$LOCK_FILE"
        return 1
    fi
}

# Stop Input Leap client
stop_client() {
    if ! is_running; then
        log_info "Input Leap client is not running"
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    log_info "Stopping Input Leap client (PID: $pid)..."
    
    # Graceful shutdown
    kill "$pid" 2>/dev/null || true
    
    # Wait for graceful shutdown
    local count=0
    while ps -p "$pid" > /dev/null 2>&1 && [[ $count -lt 10 ]]; do
        sleep 1
        ((count++))
    done
    
    # Force kill if still running
    if ps -p "$pid" > /dev/null 2>&1; then
        log_warn "Force killing client..."
        kill -9 "$pid" 2>/dev/null || true
        sleep 1
    fi
    
    rm -f "$PID_FILE"
    log_success "Input Leap client stopped"
    
    # Enhanced GNOME desktop notification
    local desktop_env=$(detect_desktop)
    if command -v notify-send &> /dev/null; then
        if [[ "$desktop_env" == "GNOME" ]]; then
            # Use GNOME notification helper if available
            if [[ -f "$HOME/.config/input-leap/notify-input-leap.sh" ]]; then
                "$HOME/.config/input-leap/notify-input-leap.sh" "disconnected" "server" &
            else
                notify-send -i network-offline -u normal "Input Leap" "ðŸ”Œ Disconnected" -t 3000 2>/dev/null || true
            fi
        else
            notify-send "Input Leap" "Disconnected" -t 3000 2>/dev/null || true
        fi
    fi
}

# Restart client
restart_client() {
    log_info "Restarting Input Leap client..."
    stop_client
    sleep 1
    start_client
}

# Show status
show_status() {
    echo -e "${BLUE}Input Leap Client Status${NC}"
    echo "========================"
    
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo -e "Status: ${GREEN}Running${NC} (PID: $pid)"
        
        if load_config; then
            echo "Server: $SERVER_HOST:$SERVER_PORT"
            echo "Client: $CLIENT_NAME"
        fi
        
        # Show process info
        if ps -p "$pid" -o pid,ppid,cmd --no-headers 2>/dev/null; then
            echo ""
        fi
    else
        echo -e "Status: ${RED}Not running${NC}"
    fi
    
    # Show recent log entries
    echo ""
    echo "Recent log entries:"
    if [[ -f "$LOG_FILE" ]]; then
        tail -5 "$LOG_FILE" | sed 's/^/  /'
    else
        echo "  No log file found"
    fi
}

# Show logs
show_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        echo -e "${BLUE}Input Leap Client Logs${NC}"
        echo "======================"
        echo ""
        
        if command -v less &> /dev/null; then
            less "$LOG_FILE"
        else
            cat "$LOG_FILE"
        fi
    else
        log_warn "No log file found at $LOG_FILE"
    fi
}

# Show usage
usage() {
    echo "Input Leap Manager"
    echo ""
    echo "Usage: $(basename "$0") [command]"
    echo ""
    echo "Commands:"
    echo "  start      Start the Input Leap client"
    echo "  stop       Stop the Input Leap client"
    echo "  restart    Restart the Input Leap client"
    echo "  status     Show client status"
    echo "  config     Configure server connection"
    echo "  test       Test server connection"
    echo "  logs       Show client logs"
    echo ""
    echo "Network Commands (via leap network):"
    echo "  leap network status     Show network interface status"
    echo "  leap network auto       Auto-configure best interface"
    echo "  leap network test HOST  Test connectivity to server"
    echo "  leap network check      Check Input Leap server"
    echo ""
    echo "Files:"
    echo "  Config: $CONFIG_FILE"
    echo "  Logs:   $LOG_FILE"
    echo "  PID:    $PID_FILE"
}

# Main execution
main() {
    local command="${1:-status}"
    
    case "$command" in
        start)
            start_client
            ;;
        stop)
            stop_client
            ;;
        restart)
            restart_client
            ;;
        status)
            show_status
            ;;
        config)
            configure
            ;;
        test)
            test_connection
            ;;
        logs)
            show_logs
            ;;
        -h|--help|help)
            usage
            ;;
        *)
            echo "Unknown command: $command"
            echo ""
            usage
            exit 1
            ;;
    esac
}

# Run if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
